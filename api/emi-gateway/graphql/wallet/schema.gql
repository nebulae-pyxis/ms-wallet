"Command response"
type CommandResponse {
  "Response code"
  code: Int
  "Response message"
  message: String
}

"Wallet info"
type Pocket {
  "balance pocket"
  balance: Float
  "bonus pocket"
  bonus: Float
}

"Wallet info"
type Wallet {
  "Wallet ID"
  _id: ID!
  "pocket info"
  pockets: Pocket!
  "Wallet state"
  spendingState: SpendingStateEnum
  "Business ID"
  businessId: String
}

enum SpendingStateEnum {
  ALLOWED
  FORBIDDEN
}

"Business info"
type Business {
  "Business id"
  _id: ID
  "Business name"
  name: String
}

type ProductBonusConfig {
  type: String
  concept: String
  bonusType: String
  bonusValueByBalance: Float
  bonusValueByCredit: Float
}

input ProductBonusConfigInput {
  type: String
  concept: String
  bonusType: String
  bonusValueByBalance: Float
  bonusValueByCredit: Float
}

input ManualBalanceAdjustmentInput {
  "Business ID"
  businessId: String!
  "Value"
  value: Float!
  "Adjustment type"
  adjustmentType: String!  
  "Notes"
  notes: String!
  "Location"
  location: LocationInput
}

input LocationInput {
  latitude: String!
  longitude: String!
}

enum ComparatorEnum {
  "Less than"
  LT
  "Greater than"
  GT
  "Less than or equal"
  LTE
  "Greater thanor equal"
  GTE
  "Enough"
  ENOUGH
}

type WalletPocketSelectionRuleCondition {
  pocket: String
  comparator: ComparatorEnum
  value: Int
}

input WalletPocketSelectionRuleConditionInput {
  pocket: String
  comparator: ComparatorEnum
  value: Int 
}

type WalletPocketSelectionRule {
  priority: Int
  toUse: String
  when: WalletPocketSelectionRuleCondition
}

input WalletPocketSelectionRuleInput {
  priority: Int
  toUse: String
  when: WalletPocketSelectionRuleConditionInput
}


type WalletSpendingRule {
  id: BigInt
  businessId: String
  businessName: String
  minOperationAmount: Int
  productBonusConfigs: [ProductBonusConfig]
  autoPocketSelectionRules: [WalletPocketSelectionRule]
  lastEditionTimestamp: BigInt
  editedBy: String
}

input WalletSpendingRuleInput {
  businessId: String
  minOperationAmount: Int
  productBonusConfigs: [ProductBonusConfigInput]
  autoPocketSelectionRules: [WalletPocketSelectionRuleInput]
}


type Query {
  "Get business"
  getWalletBusiness: Business
  "Get businesses"
  getWalletBusinesses: [Business]
  "Get wallet info of the business"
  getWallet(businessId: String!): Wallet

  "Fetch spending of the buiness given as parameter"
  WalletGetSpendingRule(businessId: String): WalletSpendingRule
  "Get all businesses filtered"
  WalletGetSpendingRules(
    page: Int!
    count: Int!
    filter: String
    sortColumn: String
    sortOrder: String
  ): [WalletSpendingRule]
}

type Mutation {
  "Mutation to create manual balance adjustments"
  makeManualBalanceAdjustment(input: ManualBalanceAdjustmentInput): CommandResponse
  walletUpdateSpendingRule(input: WalletSpendingRuleInput ): CommandResponse
}

type Subscription {
  "This events is triggered when a wallet is created or updated"
  walletUpdated: Wallet
}

