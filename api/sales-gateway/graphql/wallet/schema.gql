type WalletPockets{
  balance: Float
  bonus: Float
}

type WalletStatus{
  businessId: String
  spendingState: String
  pockets: WalletPockets
}

"Wallet transaction info"
type WalletTransaction {
  "Wallet ID"
  _id: ID!
  "Timestamp where the transaction was created"
  timestamp: BigInt!
  "ID of the business associated with the transaction"
  businessId: String!
  "Transaction type"
  type: String!
  "Transaction concept"
  concept: String!
  "Indicates which was the used pocket"
  pocket: String!
  "Value associated to the transaction"
  value: Float!
  "User that performs the operation that create the transaction"
  user: String!  
  "Notes"
  notes: String
  "Location where the operation was performed"
  location: Location
  "Terminal data (Additional info useful to identify where the operation was performed)"
  terminal: Terminal
  "IDs of the wallet transactions associated with this one"
  associatedTransactiondIds: [String]
}

"Location with GeoJson format"
type Location {
  "Geojson type E.g: Point, LineString"
  type: String!
  "Geojson coordinates"
  coordinates: [String]!
}


"Terminal data"
type Terminal {
  id: String
  userId: String
  username: String
}


input FilterInput {
  "ID of the business with which the information will be filter"
  businessId: String!
  "Init date"
  initDate: BigInt!
  "End date"
  endDate: BigInt!
  "Transaction type"
  transactionType: String
  "Transaction concept"
  transactionConcept: String
  "Terminal"
  terminal: TerminalInput
}

input TerminalInput {
  "Terminal ID"
  id: String
  "Terminal User ID"
  userId: String
  "Terminal username"
  username: String
}

type Query {
  "Get wallet status"
  Wallet:  WalletStatus  @requireAuth
  "Get the transactions history according to the filter and the pagination"
  WalletTransactionsHistory(filterInput: FilterInput!): [WalletTransaction] @requireAuth
  "Get a transaction history by id"
  WalletTransactionsHistoryById(id: ID!): WalletTransaction @requireAuth
}